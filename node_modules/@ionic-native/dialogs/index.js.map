{"version":3,"sources":["../../../src/@ionic-native/plugins/dialogs/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAkBxE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH;IAA6B,2BAAiB;IAA9C;;IA0DA,CAAC;IAxDC;;;;;;OAMG;IAKH,uBAAK,GAAL,UAAM,OAAe,EAAE,KAAc,EAAE,UAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAErF;;;;;;OAMG;IAKH,yBAAO,GAAP,UAAQ,OAAe,EAAE,KAAc,EAAE,YAAuB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAE9F;;;;;;;OAOG;IAKH,wBAAM,GAAN,UAAO,OAAgB,EAAE,KAAc,EAAE,YAAuB,EAAE,WAAoB,IAAoC,MAAM,CAAC,CAAC,CAAC;IAGnI;;;OAGG;IAIH,sBAAI,GAAJ,UAAK,KAAa,IAAU,CAAC;IAExB,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA5CA;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;wCACmF;IAarF;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;0CAC4F;IAc9F;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;yCACiI;IAUnI;QAHC,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;SACX,CAAC;;;;uCAC2B;IAlDlB,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,wBAAwB;YACnC,IAAI,EAAE,kDAAkD;YACxD,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACtE,CAAC;OAEW,OAAO,CA0DnB;IAAD,cAAC;CA1DD,AA0DC,CA1D4B,iBAAiB,GA0D7C;SA1DY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\nexport interface DialogsPromptCallback {\n\n  /**\n   * The index of the pressed button. (Number) Note that the index uses one-based indexing, so the value is 1, 2, 3, etc.\n   */\n  buttonIndex: number;\n\n  /**\n   * The text entered in the prompt dialog box. (String)\n   */\n  input1: string;\n\n}\n\n\n/**\n * @name Dialogs\n * @description\n * This plugin gives you ability to access and customize the device native dialogs.\n *\n * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).\n *\n * @usage\n * ```typescript\n * import { Dialogs } from '@ionic-native/dialogs';\n *\n * constructor(private dialogs: Dialogs) { }\n *\n * ...\n *\n * this.dialogs.alert('Hello world')\n *   .then(() => console.log('Dialog dismissed'))\n *   .catch(e => console.log('Error displaying dialog', e));\n *\n *\n * ```\n * @interfaces\n * DialogsPromptCallback\n */\n@Plugin({\n  pluginName: 'Dialogs',\n  plugin: 'cordova-plugin-dialogs',\n  pluginRef: 'navigator.notification',\n  repo: 'https://github.com/apache/cordova-plugin-dialogs',\n  platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Windows']\n})\n\nexport class Dialogs extends IonicNativePlugin {\n\n  /**\n   * Shows a custom alert or dialog box.\n   * @param {string} message Dialog message.\n   * @param {string} title Dialog title. (Optional, defaults to Alert)\n   * @param {string} buttonName Button name. (Optional, defaults to OK)\n   * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 4\n  })\n  alert(message: string, title?: string, buttonName?: string): Promise<any> { return; }\n\n  /**\n   * Displays a customizable confirmation dialog box.\n   * @param {string} message Dialog message.\n   * @param {string} title Dialog title. (Optional, defaults to Confirm)\n   * @param {Array<string>} buttonLabels Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])\n   * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked, or 0 if the user has dismissed the dialog by clicking outside the dialog box. Note that the index use one-based indexing.\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 4\n  })\n  confirm(message: string, title?: string, buttonLabels?: string[]): Promise<number> { return; }\n\n  /**\n   * Displays a native dialog box that is more customizable than the browser's prompt function.\n   * @param {string} message Dialog message.\n   * @param {string} title Dialog title. (Optional, defaults to Prompt)\n   * @param {Array<string>} buttonLabels  Array of strings specifying button labels. (Optional, defaults to [\"OK\",\"Cancel\"])\n   * @param {string} defaultText Default textbox input value.  (Optional, Default: empty string)\n   * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 5\n  })\n  prompt(message?: string, title?: string, buttonLabels?: string[], defaultText?: string): Promise<DialogsPromptCallback> { return; }\n\n\n  /**\n   * The device plays a beep sound.\n   * @param {numbers} times The number of times to repeat the beep.\n   */\n  @Cordova({\n    sync: true\n  })\n  beep(times: number): void { }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}